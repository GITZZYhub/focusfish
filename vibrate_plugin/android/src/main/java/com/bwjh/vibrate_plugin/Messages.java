// Autogenerated from Pigeon (v1.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.bwjh.vibrate_plugin;

import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Messages {

  public enum FeedbackType {
    success(0),
    error(1),
    warning(2),
    selection(3),
    impact(4),
    heavy(5),
    medium(6),
    light(7);

    private int index;
    private FeedbackType(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class FeedbackTypeClass {
    private FeedbackType type;
    public FeedbackType getType() { return type; }
    public void setType(FeedbackType setterArg) { this.type = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("type", type.index);
      return toMapResult;
    }
    static FeedbackTypeClass fromMap(Map<String, Object> map) {
      FeedbackTypeClass fromMapResult = new FeedbackTypeClass();
      Object type = map.get("type");
      fromMapResult.type = FeedbackType.values()[(int)type];
      return fromMapResult;
    }
  }
  private static class HostVibratePluginApiCodec extends StandardMessageCodec {
    public static final HostVibratePluginApiCodec INSTANCE = new HostVibratePluginApiCodec();
    private HostVibratePluginApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:
          return FeedbackTypeClass.fromMap((Map<String, Object>) readValue(buffer));

        default:
          return super.readValueOfType(type, buffer);

      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof FeedbackTypeClass) {
        stream.write(128);
        writeValue(stream, ((FeedbackTypeClass) value).toMap());
      } else
      {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface HostVibratePluginApi {
    void vibrate(Integer duration);
    Boolean canVibrate();
    void feedback(FeedbackTypeClass feedbackType);

    /** The codec used by HostVibratePluginApi. */
    static MessageCodec<Object> getCodec() {
      return HostVibratePluginApiCodec.INSTANCE;
    }

    /** Sets up an instance of `HostVibratePluginApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, HostVibratePluginApi api) {
      {
        BasicMessageChannel<Object> channel =
                new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HostVibratePluginApi.vibrate", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Integer durationArg = (Integer) args.get(0);
              if (durationArg == null) {
                throw new NullPointerException("durationArg unexpectedly null.");
              }
              api.vibrate(durationArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
                new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HostVibratePluginApi.canVibrate", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Boolean output = api.canVibrate();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
                new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HostVibratePluginApi.feedback", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              FeedbackTypeClass feedbackTypeArg = (FeedbackTypeClass)args.get(0);
              if (feedbackTypeArg == null) {
                throw new NullPointerException("feedbackTypeArg unexpectedly null.");
              }
              api.feedback(feedbackTypeArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
